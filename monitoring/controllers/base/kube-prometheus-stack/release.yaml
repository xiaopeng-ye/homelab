apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 30m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: "*"
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: monitoring
      interval: 12h
  values:
    fullnameOverride: prometheus

    crds:
      enabled: true

    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: true
        configReloaders: true
        general: true
        k8sContainerCpuUsageSecondsTotal: true
        k8sContainerMemoryCache: true
        k8sContainerMemoryRss: true
        k8sContainerMemorySwap: true
        k8sContainerResource: true
        k8sContainerMemoryWorkingSetBytes: true
        k8sPodOwner: true
        kubeApiserverAvailability: true
        kubeApiserverBurnrate: true
        kubeApiserverHistogram: true
        kubeApiserverSlos: true
        kubeControllerManager: true
        kubelet: true
        kubeProxy: true
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeSchedulerAlerting: true
        kubeSchedulerRecording: true
        kubeStateMetrics: true
        network: true
        node: true
        nodeExporterAlerting: true
        nodeExporterRecording: true
        prometheus: true
        prometheusOperator: true
        windows: true

    alertmanager:
      fullnameOverride: alertmanager
      enabled: true
      ingress:
        enabled: false

    grafana:
      enabled: true
      fullnameOverride: grafana

      ## ForceDeployDatasources Create datasource configmap even if grafana deployment has been disabled
      ##
      forceDeployDatasources: false

      ## ForceDeployDashboard Create dashboard configmap even if grafana deployment has been disabled
      ##
      forceDeployDashboards: false

      ## Deploy default dashboards
      ##
      defaultDashboardsEnabled: true
      
      serviceMonitor:
        enabled: true

      adminUser: admin
      adminPassword: admin

      ingress:
        enabled: false

    kubeApiServer:
      enabled: true

    kubelet:
      enabled: true
      serviceMonitor:
        enabled: true
        ## Enable scraping /metrics from kubelet's service
        kubelet: true

    kubeControllerManager:
      enabled: true

      ## If your kube controller manager is not deployed as a pod, specify IPs it can be found on
      ##
      endpoints: 
        - 10.8.10.100
        - 10.8.10.101
        - 10.8.10.102

    kubeEtcd:
      enabled: true

      serviceMonitor:
        enabled: true
      ## If your etcd is not deployed as a pod, specify IPs it can be found on
      ##
      endpoints: 
        - 10.8.10.100
        - 10.8.10.101
        - 10.8.10.102

      ## Etcd service. If using kubeEtcd.endpoints only the port and targetPort are used
      ##
      service:
        enabled: true
        port: 2381
        targetPort: 2381
        ipDualStack:
          enabled: false
          ipFamilies: ["IPv6", "IPv4"]
          ipFamilyPolicy: "PreferDualStack"

    kubeScheduler:
      enabled: true
      ## If your kube scheduler is not deployed as a pod, specify IPs it can be found on
      ##
      endpoints: 
        - 10.8.10.100
        - 10.8.10.101
        - 10.8.10.102

    kubeProxy:
      enabled: true
      endpoints: 
        - 10.8.10.100
        - 10.8.10.101
        - 10.8.10.102

    kubeStateMetrics:
      enabled: true

    kube-state-metrics:
      selfMonitor: 
        enabled: true
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [__meta_kubernetes_pod_node_name]
              targetLabel: kubernetes_node
            # - sourceLabels: [__meta_kubernetes_pod_node_name]
            #   separator: ;
            #   regex: ^(.*)$
            #   targetLabel: nodename
            #   replacement: $1
            #   action: replace

    prometheus-node-exporter:
      enabled: true
      podLabels:
        jobLabel: node-exporter
      extraArgs:
        - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
        - --collector.filesystem.fs-types-exclude=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs|erofs)$
      service:
        portName: http-metrics

      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: [__meta_kubernetes_pod_node_name]
              targetLabel: kubernetes_node

    prometheusOperator:
      enabled: true
      prometheusConfigReloader:
        resources:
          limits:
            memory: 100Mi
          requests:
            cpu: 200m
            memory: 50Mi

    prometheus:
      enabled: true
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn-retain"
              resources:
                requests:
                  storage: 25Gi
                limits:
                  storage: 50Gi

      
      
        
        

